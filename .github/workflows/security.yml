name: Security Scan

on:
  schedule:
    - cron: '0 2 * * *' # Run daily at 2 AM
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --json > npm-audit.json
        npm audit --audit-level=moderate
        
    - name: Upload audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: npm-audit-results
        path: npm-audit.json
        
  code-security:
    name: Code Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security tests
      run: npm run test:security
      
    - name: Run JWT tests
      run: npm run test:jwt
      
    - name: Check for hardcoded secrets
      run: |
        echo "Checking for hardcoded secrets..."
        grep -r "password\|secret\|token\|key" src/ --exclude-dir=__tests__ --exclude="*.test.js" | grep -v "//\|/\*" || echo "No hardcoded secrets found"
        
    - name: Check for SQL injection vulnerabilities
      run: |
        echo "Checking for SQL injection vulnerabilities..."
        grep -r "SELECT\|INSERT\|UPDATE\|DELETE" src/ --exclude-dir=__tests__ | grep -v "//\|/\*" || echo "No SQL queries found"
        
    - name: Check for XSS vulnerabilities
      run: |
        echo "Checking for XSS vulnerabilities..."
        grep -r "innerHTML\|dangerouslySetInnerHTML" src/ --exclude-dir=__tests__ | grep -v "//\|/\*" || echo "No XSS vulnerabilities found"
        
  semgrep-scan:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/javascript
          p/react
          p/react-native
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        
  snyk-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: Upload Snyk results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: snyk.sarif
        
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      matrix:
        language: [ 'javascript' ]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [dependency-check, code-security, semgrep-scan, snyk-scan, codeql-analysis]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download audit results
      uses: actions/download-artifact@v4
      with:
        name: npm-audit-results
        path: ./security-reports/
        
    - name: Generate security report
      run: |
        mkdir -p security-reports
        echo "# Security Scan Report" > security-reports/README.md
        echo "Generated on: $(date)" >> security-reports/README.md
        echo "" >> security-reports/README.md
        echo "## Summary" >> security-reports/README.md
        echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> security-reports/README.md
        echo "- Code Security: ${{ needs.code-security.result }}" >> security-reports/README.md
        echo "- Semgrep Scan: ${{ needs.semgrep-scan.result }}" >> security-reports/README.md
        echo "- Snyk Scan: ${{ needs.snyk-scan.result }}" >> security-reports/README.md
        echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-reports/README.md
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-reports/
        
    - name: Notify security team
      if: failure()
      env:
        SLACK_WEBHOOK: ${{ secrets.SECURITY_SLACK_WEBHOOK }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"ðŸš¨ Security scan failed! Please review the security report."}' \
          $SLACK_WEBHOOK
          
  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for license compliance
      run: |
        echo "Checking license compliance..."
        find node_modules -name "package.json" -exec grep -l "license" {} \; | head -10
        
    - name: Check for GDPR compliance
      run: |
        echo "Checking GDPR compliance..."
        grep -r "personal data\|privacy\|consent" src/ --exclude-dir=__tests__ || echo "No GDPR-related code found"
        
    - name: Check for security headers
      run: |
        echo "Checking security headers..."
        grep -r "X-Content-Type-Options\|X-Frame-Options\|X-XSS-Protection" src/ || echo "Security headers not found"
        
  penetration-test:
    name: Penetration Test
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run penetration tests
      run: |
        echo "Running penetration tests..."
        # Add your penetration testing commands here
        # Example: npm run test:penetration
        
    - name: Generate penetration test report
      run: |
        echo "Generating penetration test report..."
        # Add your penetration test report generation here